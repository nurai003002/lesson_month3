from aiogram import Bot, Dispatcher,types, executor
from config import token
import sqlite3
from datetime import datetime 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

connect = sqlite3.connect("bank_customs.db",check_same_thread=False)
cursor = connect.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        lastname TEXT,
        phone_number VARCHAR (100)
        
);""")
cursor.execute(""" CREATE TABLE IF NOT EXISTS user_info(
               user_id INTEGER PRIMARY KEY,
               username  VARCHAR (150),
               first_name VARCHAR (150),
               last_name VARCHAR (150),
               balance INTEGER DEFAULT 0,
               data_regist DATETIME
);""")
connect.commit()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS transfers (
        transfer_id INTEGER PRIMARY KEY,
        sender_id INTEGER,
        recipient_id INTEGER,
        amount REAL,
        FOREIGN KEY(sender_id) REFERENCES users(user_id),
        FOREIGN KEY(recipient_id) REFERENCES users(user_id)
);""")
connect.commit()


async def transfer_funds(sender_id, recipient_id, amount):
    cursor.execute("UPDATE user_info SET balance = balance - ? WHERE user_id = ?", (amount, sender_id))
    cursor.execute("UPDATE user_info SET balance = balance + ? WHERE user_id = ?", (amount,  recipient_id))
    cursor.execute("INSERT INTO transfers (sender_id, recipient_id, amount) VALUES (?, ?, ?)",
                   (sender_id, recipient_id, amount))
    connect.commit()


def get_balance(user_id):
    cursor.execute(f"SELECT balance FROM user_info WHERE user_id= {user_id} ")
    connect.commit()
    result = cursor.fetchone()
    return result[0] if result is not None else None

@dp.message_handler(commands=['balance'])
async def cmd_balance(message: types.Message):
    user_id = message.from_user.id
    # await regist(message.from_user.username, message.from_user.last_name, phone_number='')  
    balance = get_balance(user_id)
    if balance is not None:
        await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Å–æ–º–æ–≤.")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.")


class OrderPersonState(StatesGroup):
    lastname = State()
    username = State()
    phone_number = State()
   
buttons = [ 
    types.KeyboardButton("–û –Ω–∞—Å"),
    types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
    types.KeyboardButton('/balance'),
    types.KeyboardButton('/transfer'),
    types.KeyboardButton("/deposit")

]
key_buttons = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    
    cursor=connect.cursor()
    cursor.execute(f"SELECT user_id FROM user_info WHERE user_id = {message.from_user.id};")
    res = cursor.fetchall()
    if not res:
        cursor.execute(f"""INSERT INTO user_info (user_id, username, first_name, last_name,  data_regist) 
        VALUES ('{message.from_user.id}',  
               '{message.from_user.username}',
               '{message.from_user.first_name}',
               '{message.from_user.last_name}',
               '{datetime.now()}'
);""")
        connect.commit()

    await message.answer("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ , –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è 'Cash_bank'–±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —á—Ç–æ–±—ã –≤ –¥–∞–ª—å—à–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ç—Ä–µ–¥–Ω–∏—á–µ—Å—Ç–≤a –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø  |
                                                                                              V
                          """, reply_markup = key_buttons)
    await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Å—á–µ—Ç: {message.from_user.id}\n–ù–∏–∫–Ω–µ–π–º: {message.from_user.username}")

    
@dp.message_handler(text = '–û –Ω–∞—Å')
async def about_us(message: types.Message):
    await message.answer("–ú—ã Cash_bank üè¶ —è–≤–ª—è–µ–º—Å—è –æ–¥–Ω–∏–º –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∫–æ–ø–º–∞–Ω–∏–π –≤ –ö–†. –£ –Ω–∞—Å –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ñ–∏—Å –≤ –≥–æ—Ä–æ–¥–µ –û—à, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç –≤ 2020–≥–æ–¥—É üí™üèª. –ö—Ä–æ–º–µ —Ç–æ–≥–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∏–ª–∏–∞–ª—ã –≤: –î–∂–∞–ª–∞-–ê–±–∞–¥, –´—Å—Å—ã–∫-–ö—É–ª—å, –ë–∏—à–∫–µ–∫, –¢–∞–ª–∞—Å.\n \n–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?üëáüèª \n-–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ—Å–µ–º –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Ö –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å.üîê ",reply_markup=key_buttons)

##################################################
class DepositState(StatesGroup):
    amount = State()

@dp.message_handler(commands='deposit')
async def cmd_deposit(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    await DepositState.amount.set()

@dp.message_handler(state=DepositState.amount)
async def deposit_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute('SELECT balance FROM user_info WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()[0]

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")

        cursor.execute('UPDATE user_info SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        connect.commit()

        await message.answer(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        await state.finish()
############################################################


@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def registration(message: types.Message):
    await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:  ")
    await OrderPersonState.lastname.set()


@dp.message_handler(state = OrderPersonState.lastname)
async def first_n(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['lastname'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
    await OrderPersonState.next()

@dp.message_handler(state = OrderPersonState.username)
async def later(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä:")
    await OrderPersonState.next()
    

@dp.message_handler(state=OrderPersonState.phone_number)
async def num(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text


    username = data['username']
    lastname = data['lastname']
    phone_number = data['phone_number']
   


    await message.answer("–í—ã —Ç–µ–ø–µ—Ä—å –≤ –±–∞–∑–µ, \n —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å /deposit")
    await state.finish()

    cursor.execute(""" INSERT INTO users (username, lastname, phone_number)
                   VALUES (?,?,?) """, (username, lastname, phone_number ))
    connect.commit()


class TransferState(StatesGroup):
    amount = State()
    recipient_balance = State()

@dp.message_handler(commands=['transfer'])
async def transfer_command(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:')
    await TransferState.amount.set()

@dp.message_handler(state=TransferState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    amount = float(message.text)
    await state.update_data(amount=amount)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:')
    await TransferState.recipient_balance.set()

@dp.message_handler(state=TransferState.recipient_balance)
async def process_recipient_balance(message: types.Message, state: FSMContext):
    recipient_balance_data = int(message.text)
    data = await state.get_data()
    amount = data.get('amount')
    result = process_transfer(message.from_user.id, recipient_balance_data, amount)

    if result:
        await message.answer('–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        await message.answer(f'–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} —Ä—É–±.')
        await message.answer(f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_balance_data}')
    else:
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.')

    await state.finish()

def process_transfer(sender_id, recipient_balance_data, amount):
    conn = sqlite3.connect('bank_customs.db')
    cursor = conn.cursor()

    try:
        conn.execute('BEGIN TRANSACTION')

        cursor.execute('SELECT balance FROM user_info WHERE user_id = ?',
        (sender_id,))
        sender_balance = cursor.fetchone()[0]

        if sender_balance >= amount:
            cursor.execute('UPDATE user_info SET balance = balance - ? WHERE user_id = ?', (amount, sender_id))

            cursor.execute('SELECT user_id FROM user_info WHERE user_id = ?', (recipient_balance_data,))
            recipient_exists = cursor.fetchone()

            if recipient_exists:
                cursor.execute('UPDATE user_info SET balance = balance + ? WHERE user_id = ?', (amount, recipient_balance_data))

                
                conn.execute('COMMIT')

                return True
            else:
                return False  
        else:
            return False  

    except Exception as e:
        conn.execute('ROLLBACK')
        print(f'Error: {e}')
        return False

    finally:
        
        conn.close()

@dp.message_handler()
async def mistake(message: types.Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


executor.start_polling(dp, skip_updates=True)
